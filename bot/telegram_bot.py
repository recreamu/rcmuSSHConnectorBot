import asyncio
import asyncssh
import re
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputFile, FSInputFile
)
from aiogram.filters import Command

from botToken import TOKEN

# ======== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ========
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ======== –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è SSH –¥–∞–Ω–Ω—ã—Ö ========
# –∫–ª—é—á–∏: ip, port, username, password, input_mode (bool), editing (bool)
user_data: dict[int, dict] = {}
active_sessions = {}  # user_id: SSHClientConnection


# ======== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ========
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"), KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")]
    ],
    resize_keyboard=True
)

edit_button_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_data")]
    ]
)

# —Å–ø–∏—Å–æ–∫ ¬´–æ–ø–∞—Å–Ω—ã—Ö¬ª –∫–æ–º–∞–Ω–¥
BLACKLIST = {'nano', 'vim', 'vi', 'top', 'htop', 'less', 'more'}

# –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ¬´–æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö¬ª –∫–æ–º–∞–Ω–¥
pending_commands: dict[int, str] = {}

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
force_exec_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ", callback_data="force_exec")]
    ]
)


def get_tools_kb(user_id: int) -> ReplyKeyboardMarkup:
    data = user_data.get(user_id, {})
    mode = data.get("input_mode", False)
    input_button_text = "–°–µ—Å—Å–∏—è: –í–∫–ª‚úÖ" if mode else "–°–µ—Å—Å–∏—è: –í—ã–∫–ª‚õî"
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text=input_button_text),
                KeyboardButton(text="–°–∫–∞—á–∞—Ç—å –∏–∑ —Ç–µ–∫—É—â. –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"),
                KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ —Ç–µ–∫—É—â. –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"),
                KeyboardButton(text="–ü—É—Å—Ç–æ"),
            ],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# ======== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ========
@dp.message(Command("start"))
async def cmd_start(message: Message):
    uid = message.from_user.id
    if uid not in user_data:
        user_data[uid] = {
            "ip": "192.168.0.1",
            "port": "22",
            "username": "user",
            "password": "pass",
            "input_mode": False,
            "editing": False,
            "current_path": ".",
            "download_mode": False,
            "upload_mode": False,
        }
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:", reply_markup=main_kb)

@dp.message(F.text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
async def user_info(message: Message):
    uid = message.from_user.id
    data = user_data.get(uid)
    if not data:
        return await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ /start.")
    info = (
        f"üîí SSH –¥–∞–Ω–Ω—ã–µ:\n"
        f"IP: {data['ip']}\n"
        f"–ü–æ—Ä—Ç: {data['port']}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data['username']}\n"
        f"–ü–∞—Ä–æ–ª—å: {data['password']}\n\n"
        f"–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏, –æ–Ω–∏ –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞."
    )
    await message.answer(info, reply_markup=edit_button_kb)

@dp.callback_query(F.data == "edit_data")
async def start_edit_data(call: CallbackQuery):
    uid = call.from_user.id
    if uid not in user_data:
        user_data[uid] = {"editing": False, "input_mode": False}
    user_data[uid]["editing"] = True
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ SSH‚Äë–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "ip,port,username,password"
    )
    await call.answer()

@dp.message(F.text == "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
async def tools_handler(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:", reply_markup=get_tools_kb(message.from_user.id))

@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def back_handler(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)

@dp.message(F.text == "–°–∫–∞—á–∞—Ç—å –∏–∑ —Ç–µ–∫—É—â. –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
async def start_download_mode(message: Message):
    uid = message.from_user.id
    data = user_data[uid]

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã pwd
    if uid in active_sessions:
        conn, process = active_sessions[uid]
        try:
            process.stdin.write("pwd\n")
            await asyncio.sleep(0.1)
            raw_output = await process.stdout.read(4096)

            # –£–¥–∞–ª—è–µ–º ANSI-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ prompt'—ã
            output = re.sub(r'\x1B\].*?(?:\x07|\x1B\\)', '', raw_output)
            output = re.sub(r'\x1B\[[0-?]*[ -/]*[@-~]', '', output)
            lines = output.strip().splitlines()

            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, –ø–æ—Ö–æ–∂—É—é –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
            for line in lines:
                if line.startswith("/"):
                    data["current_path"] = line.strip()
                    break

        except Exception as e:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å —á–µ—Ä–µ–∑ pwd: {e}")

    data["download_mode"] = True
    await message.answer(
        f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑: {data['current_path']}\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:"
    )





@dp.message(F.text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ —Ç–µ–∫—É—â. –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
async def start_upload_mode(message: Message):
    uid = message.from_user.id
    data = user_data[uid]
    data["upload_mode"] = True
    await message.answer(
        f"–ó–∞–≥—Ä—É–∑–∫–∞ –≤: {data['current_path']}\n"
        "–û–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:"
    )

@dp.callback_query(F.data == "force_exec")
async def force_execute(callback: CallbackQuery):
    uid = callback.from_user.id
    cmd = pending_commands.pop(uid, None)
    await callback.answer()  # —É–±–∏—Ä–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª
    if not cmd:
        return await callback.message.answer("–ù–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")

    session = active_sessions.get(uid)
    if not session:
        return await callback.message.answer("–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞, –≤–∫–ª—é—á–∏—Ç–µ –≤–≤–æ–¥ –∑–∞–Ω–æ–≤–æ.")

    conn, process = session
    # —à–ª—ë–º –≤ PTY —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ:
    process.stdin.write(cmd + "\n")
    await asyncio.sleep(0.1)
    output = await process.stdout.read(65536)
    # –æ—á–∏—Å—Ç–∫–∞ ANSI‚Äë–∫–æ–¥–æ–≤ –∫–∞–∫ —É –≤–∞—Å
    import re
    output = re.sub(r'\x1B\].*?(?:\x07|\x1B\\)', '', output)
    output = re.sub(r'\x1B\[[0-?]*[ -/]*[@-~]', '', output).strip()

    if output:
        await callback.message.answer(f"<pre>{output}</pre>", parse_mode="HTML")
    else:
        await callback.message.answer("üì• –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –≤—ã–≤–æ–¥–∞ –Ω–µ—Ç.")



# === –ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: —Å–Ω–∞—á–∞–ª–∞ –ª–æ–≤–∏–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===
@dp.message()
async def process_new_data_or_continue(message: Message):
    uid = message.from_user.id
    data = user_data.get(uid)
    if not data:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.")

    # === –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSH-–¥–∞–Ω–Ω—ã—Ö ===
    if data.get("editing", False):
        parts = [p.strip() for p in message.text.split(",")]
        if len(parts) != 4:
            return await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n192.168.0.1,22,root,qwerty"
            )
        ip, port, user, pwd = parts
        old = user_data[uid]
        mode = old.get("input_mode", False)
        cp = old.get("current_path", ".")
        dl = old.get("download_mode", False)
        ul = old.get("upload_mode", False)
        user_data[uid] = {
            "ip": ip,
            "port": port,
            "username": user,
            "password": pwd,
            "input_mode": mode,
            "editing": False,
            "current_path": cp,
            "download_mode": dl,
            "upload_mode": ul,
        }
        return await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=main_kb)

    text = message.text

    # === –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ ===
    if text in ("–°–µ—Å—Å–∏—è: –í—ã–∫–ª‚õî", "–°–µ—Å—Å–∏—è: –í–∫–ª‚úÖ"):
        # –ï—Å–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–∫–ª—é—á–∏—Ç—å –≤–≤–æ–¥ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º SSH-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if text == "–°–µ—Å—Å–∏—è: –í—ã–∫–ª‚õî":
            try:
                conn = await asyncssh.connect(
                    data["ip"],
                    port=int(data["port"]),
                    username=data["username"],
                    password=data["password"],
                    known_hosts=None
                )
                # —Å–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π shell (PTY)
                process = await conn.create_process(term_type="xterm")
                active_sessions[uid] = (conn, process)
                data["input_mode"] = True
                new_text = "–°–µ—Å—Å–∏—è: –í–∫–ª‚úÖ"
            except Exception as e:
                return await message.answer(f"‚ùå –û—à–∏–±–∫–∞ SSH-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n{e}")
        else:
            # –≤—ã–∫–ª—é—á–∞–µ–º –≤–≤–æ–¥ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            conn = active_sessions.pop(uid, None)
            if conn:
                conn, process = active_sessions.pop(uid, (None, None))
                if process:
                    process.stdin.write("exit\n")
                    await process.wait_closed()
                if conn:
                    conn.close()
                data["input_mode"] = False
            new_text = "–°–µ—Å—Å–∏—è: –í—ã–∫–ª‚õî"

        return await message.answer(
            f"–†–µ–∂–∏–º –≤–≤–æ–¥–∞ –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞: {new_text}",
            reply_markup=get_tools_kb(uid)
        )

    # === –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ ===
    # –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, –∏ –ø–æ–ª—É—á–∏–ª –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç, –∞ –∏–º—è —Ñ–∞–π–ª–∞:
    if data.get("download_mode"):
        filename = message.text.strip()
        data["download_mode"] = False

        try:
            conn, process = active_sessions[uid]

            # üîÑ –¢–∏—Ö–æ –æ–±–Ω–æ–≤–ª—è–µ–º current_path —á–µ—Ä–µ–∑ pwd
            process.stdin.write("pwd\n")
            await asyncio.sleep(0.1)
            output = await process.stdout.read(65536)
            output = re.sub(r'\x1B\].*?(?:\x07|\x1B\\)', '', output)
            output = re.sub(r'\x1B\[[0-?]*[ -/]*[@-~]', '', output).strip()
            if output:
                data["current_path"] = output

            async with conn.start_sftp_client() as sftp:
                remote_path = f"{data['current_path'].rstrip('/')}/{filename}"
                local = f"/tmp/{uid}_{filename}"
                await sftp.get(remote_path, local)

            await message.answer_document(FSInputFile(path=local, filename=filename))
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    # –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥—Ä—É–∑–∫–∏, –∏ –ø—Ä–∏—à—ë–ª –¥–æ–∫—É–º–µ–Ω—Ç
    if data.get("upload_mode"):
        # –µ—Å–ª–∏ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî –æ—Ç–º–µ–Ω—è–µ–º
        if not message.document:
            data["upload_mode"] = False
            return await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        # –∏–Ω–∞—á–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∏ –∑–∞–ª–∏–≤–∞–µ–º
        file = await message.document.download()
        try:
            conn = active_sessions[uid][0]
            async with conn.start_sftp_client() as sftp:
                cwd = await sftp.getcwd()
                remote_path = f"{cwd}/{message.document.file_name}"
                await sftp.put(file.name, remote_path)

            await message.answer("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω.")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            data["upload_mode"] = False
        return

    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ SSH‚Äë–∫–æ–º–∞–Ω–¥ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ PTY ===
    if data.get("input_mode"):
        session = active_sessions.get(uid)
        if not session:
            data["input_mode"] = False
            return await message.answer("‚ùå –°–µ—Å—Å–∏—è –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –†–µ–∂–∏–º –≤–≤–æ–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω.")

        conn, process = session
        cmd = message.text.strip()

        # ‚Äî‚Äî‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ‚Äî‚Äî‚Äî
        cmd_name = cmd.split()[0]
        if cmd_name in BLACKLIST and uid not in pending_commands:
            pending_commands[uid] = cmd
            return await message.answer(
                "‚ö†Ô∏è –õ—É—á—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –∑–¥–µ—Å—å, "
                "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –Ω–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ —á–∞—Ç. "
                "–°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ —Å–≤–æ—ë–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.",
                reply_markup=force_exec_kb
            )

        # 1) –ï—Å–ª–∏ —ç—Ç–æ cd ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ PTY –∏ –∑–∞—Ç–µ–º –¥–µ–ª–∞–µ–º pwd –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
        is_cd = cmd.startswith("cd ")

        process.stdin.write(cmd + "\n")
        await asyncio.sleep(0.1)

        # 2) –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        output = await process.stdout.read(65536)
        output = re.sub(r'\x1B\].*?(?:\x07|\x1B\\)', '', output)
        output = re.sub(r'\x1B\[[0-?]*[ -/]*[@-~]', '', output).strip()

        # 3) –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞ cd, —É–∑–Ω–∞–µ–º pwd –∏ –æ–±–Ω–æ–≤–∏–º current_path
        if is_cd:
            process.stdin.write("pwd\n")
            await asyncio.sleep(0.1)
            pwd_output = await process.stdout.read(65536)
            pwd_output = re.sub(r'\x1B\].*?(?:\x07|\x1B\\)', '', pwd_output)
            pwd_output = re.sub(r'\x1B\[[0-?]*[ -/]*[@-~]', '', pwd_output).strip()

            # –£—Ç–æ—á–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            if pwd_output:
                data["current_path"] = pwd_output

        # 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if output:
            return await message.answer(f"<pre>{output}</pre>", parse_mode="HTML")
        else:
            return await message.answer("üì• –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –í—ã–≤–æ–¥–∞ –Ω–µ—Ç.")


# ======== –ó–∞–ø—É—Å–∫ ========
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
