import asyncio
import asyncssh
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from aiogram.filters import Command

from botToken import TOKEN

# ======== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ========
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ======== –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è SSH –¥–∞–Ω–Ω—ã—Ö ========
# –∫–ª—é—á–∏: ip, port, username, password, input_mode (bool), editing (bool)
user_data: dict[int, dict] = {}

# ======== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ========
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"), KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")]
    ],
    resize_keyboard=True
)

edit_button_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_data")]
    ]
)

def get_tools_kb(user_id: int) -> ReplyKeyboardMarkup:
    data = user_data.get(user_id, {})
    mode = data.get("input_mode", False)
    input_button_text = "–í–≤–æ–¥‚úÖ" if mode else "–í–≤–æ–¥‚õî"
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text=input_button_text),
                KeyboardButton(text="–ü—É—Å—Ç–æ1"),
                KeyboardButton(text="–ü—É—Å—Ç–æ2"),
                KeyboardButton(text="–ü—É—Å—Ç–æ3"),
            ],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# ======== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ========
@dp.message(Command("start"))
async def cmd_start(message: Message):
    uid = message.from_user.id
    if uid not in user_data:
        user_data[uid] = {
            "ip": "192.168.0.1",
            "port": "22",
            "username": "user",
            "password": "pass",
            "input_mode": False,
            "editing": False
        }
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:", reply_markup=main_kb)

@dp.message(F.text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
async def user_info(message: Message):
    uid = message.from_user.id
    data = user_data.get(uid)
    if not data:
        return await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ /start.")
    info = (
        f"üîí SSH –¥–∞–Ω–Ω—ã–µ:\n"
        f"IP: {data['ip']}\n"
        f"–ü–æ—Ä—Ç: {data['port']}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data['username']}\n"
        f"–ü–∞—Ä–æ–ª—å: {data['password']}\n\n"
        f"–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏, –æ–Ω–∏ –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞."
    )
    await message.answer(info, reply_markup=edit_button_kb)

@dp.callback_query(F.data == "edit_data")
async def start_edit_data(call: CallbackQuery):
    uid = call.from_user.id
    if uid not in user_data:
        user_data[uid] = {"editing": False, "input_mode": False}
    user_data[uid]["editing"] = True
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ SSH‚Äë–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "ip,port,username,password"
    )
    await call.answer()

@dp.message(F.text == "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
async def tools_handler(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:", reply_markup=get_tools_kb(message.from_user.id))

@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def back_handler(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)

# === –ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: —Å–Ω–∞—á–∞–ª–∞ –ª–æ–≤–∏–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===
@dp.message()
async def process_new_data_or_continue(message: Message):
    uid = message.from_user.id
    data = user_data.get(uid)
    if not data:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.")

    # === –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSH-–¥–∞–Ω–Ω—ã—Ö ===
    if data.get("editing", False):
        parts = [p.strip() for p in message.text.split(",")]
        if len(parts) != 4:
            return await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n192.168.0.1,22,root,qwerty"
            )
        ip, port, user, pwd = parts
        mode = data.get("input_mode", False)
        user_data[uid] = {
            "ip": ip,
            "port": port,
            "username": user,
            "password": pwd,
            "input_mode": mode,
            "editing": False
        }
        return await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=main_kb)

    text = message.text

    # === –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ ===
    if text in ("–í–≤–æ–¥‚õî", "–í–≤–æ–¥‚úÖ"):
        # –ï—Å–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–∫–ª—é—á–∏—Ç—å –≤–≤–æ–¥ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º SSH-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if text == "–í–≤–æ–¥‚õî":
            try:
                conn = await asyncssh.connect(
                    data["ip"],
                    port=int(data["port"]),
                    username=data["username"],
                    password=data["password"],
                    known_hosts=None
                )
                conn.close()
            except Exception as e:
                return await message.answer(f"‚ùå –û—à–∏–±–∫–∞ SSH-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n{e}")
            data["input_mode"] = True
            new_text = "–í–≤–æ–¥‚úÖ"
        else:
            data["input_mode"] = False
            new_text = "–í–≤–æ–¥‚õî"

        return await message.answer(
            f"–†–µ–∂–∏–º –≤–≤–æ–¥–∞ –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞: {new_text}",
            reply_markup=get_tools_kb(uid)
        )

    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ SSH-–∫–æ–º–∞–Ω–¥ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ ===
    if data.get("input_mode"):
        try:
            conn = await asyncssh.connect(
                data["ip"],
                port=int(data["port"]),
                username=data["username"],
                password=data["password"],
                known_hosts=None
            )
            result = await conn.run(message.text)
            conn.close()
            output = (result.stdout or "") + (result.stderr or "")
            output = output.strip()

            if output:
                return await message.answer(f"<pre>{output}</pre>", parse_mode="HTML")
            else:
                return await message.answer("üì• –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –í—ã–≤–æ–¥–∞ –Ω–µ—Ç.")

        except Exception as e:
            return await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n{e}")

    # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö ‚Äî –º–æ–ª—á–∏–º
    return


# ======== –ó–∞–ø—É—Å–∫ ========
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
